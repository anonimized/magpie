Theorem Id,Domain,LoC,#Definitions,#Inlined (#Basic),#Generated,#Retrieved (Ranks),#Annotations,Description
plus_n_O,Arithmetic,22,4,0 (0),3,N/A,2,"Annotations: eq.* nat.* Statement: forall n : nat, n = plus n O."
plus_n_Sm,Arithmetic,30,4,0 (0),3,N/A,3,"Annotations: eq.* eq_ind_r nat.* Statement: forall n m : nat, (S (plus n m)) = (plus n (S m))."
mult_n_O,Arithmetic,28,5,0 (0),3,N/A,3,"Annotations: eq.* nat.* plus Statement: forall n : nat, O = mult n O."
plus_assoc,Arithmetic,30,5,0 (0),3,N/A,3,"Annotations: eq.* eq_ind_r nat.* Statement: forall a b c : nat, plus a (plus b c) = plus (plus a b) c"
plus_comm,Arithmetic,58,7,2 (0),4,N/A,3,"Annotations: eq.* eq_ind_r nat.* Statement: forall n m : nat, plus n m = plus m n."
plus_mult_n_plus_m,Arithmetic,90,10,4 (4),10,"4 (4, 6, 7, 10)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall n m : nat, plus m (mult m n) = mult m (S n)."
mult_comm,Arithmetic,112,12,6 (4),10,"4 (4, 6, 7, 10)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall a b : nat, mult a b = mult b a."
mult_distributive_l,Arithmetic,130,13,7 (4),11,"4 (4, 5, 9, 10)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall m n p : nat, mult n (plus m p) = plus (mult n m) (mult n p)."
mult_distributive_r,Arithmetic,140,14,8 (4),11,"4 (4, 5, 9, 10)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall m n p : nat, mult (plus n m) p = plus (mult n p) (mult m p)."
mult_assoc,Arithmetic,152,15,9 (4),11,"4 (4, 5, 9, 10)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall a b c : nat, mult (mult a b) c = mult a (mult b c)."
prod_of_pows,Arithmetic,170,17,10 (10),13,"10 (2, 4, 5, 6, 7, 8, 9, 10, 12, 13)",5,"Annotations: eq.* eq_ind_r nat.* plus mult Statement: forall m n a : nat, mult (pow a m) (pow a n) = pow a (plus m n)."
le_n_Sn,Arithmetic,14,3,0 (0),0,N/A,1,"Annotations: nat.* Statement: forall n : nat, le n (S n)."
le_O_n,Arithmetic,16,3,0 (0),0,N/A,1,"Annotations: nat.* Statement: forall n : nat, le O n."
le_trans,Arithmetic,15,3,0 (0),0,N/A,1,"Annotations: nat.* Statement: forall m n p : nat, le n m -> le m p -> le n p."
lt_le_trans,Arithmetic,37,6,2 (2),3,"2 (1, 2)",1,"Annotations: nat.* Statement: forall n m p : nat, lt n m -> le m p -> lt n p."
le_n_n_plus_p,Arithmetic,76,9,3 (3),7,"3 (3, 5, 6)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall p n : nat, le n (plus n p)."
le_n_m_le_n_m_plus_p,Arithmetic,85,10,4 (3),7,"3 (3, 5, 6)",4,"Annotations: eq.* eq_ind_r nat.* plus Statement: forall n m p : nat, le n m -> le n (plus m p)."
le_n_m_le_S_n_S_m,Arithmetic,15,3,0 (0),0,N/A,1,"Annotations: nat.* Statement: forall n m : nat, le n m -> le (S n) (S m)."
plus_le_compact,Arithmetic,36,5,1 (0),0,N/A,2,"Annotations: nat.* plus Statement: forall n m p q : nat, le n m -> le p q -> le (plus n p) (plus m q)."
mult_le_l,Arithmetic,140,15,8 (5),13,"5 (3, 4, 5, 6, 7)",5,"Annotations: eq.* eq_ind_r nat.* plus mult Statement: forall a b c : nat, le b c -> le (mult a b) (mult a c)."
mult_lt_l,Arithmetic,174,19,11 (11),20,"11 (3, 4, 5, 6, 9, 10, 11, 12, 13, 15, 17)",6,"Annotations: eq.* eq_ind_r nat.* plus mult le Statement: forall a b c : nat, lt O a -> lt b c -> lt (mult a b) (mult a c)."
factor_is_O,Arithmetic,47,8,1 (0),4,N/A,5,"Annotations: eq.* eq_ind_r nat.* plus mult Statement: forall n m : nat, or (n = O) (m = O) -> (mult n m) = O."
app_nil_end,List,27,5,0 (0),2,N/A,3,"Annotations: eq.* eq_ind_r list.* Statement: forall (T : Set) (l : list T), app T l (nil T) = l."
app_assoc,List,32,5,0 (0),2,N/A,3,"Annotations: eq.* eq_ind_r list.* Statement: forall (T : Set) (l1 l2 l3 : list T), app T l1 (app T l2 l3) = app T (app T l1 l2) l3."
app_eq_nil,List,36,6,0 (0),2,N/A,4,"Annotations: eq.* eq_ind_r list.* and Statement: forall (A : Set) (l l':list A), app A l l' = nil A -> and (l = nil A) (l' = nil A)."
app_length,List,43,8,0 (0),4,N/A,5,"Annotations: eq.* eq_ind_r list.* plus length Statement: forall (A : Set) (l l' : list A), length A (app A l l') = plus (length A l) (length A l')."
app_cons_not_nil,List,20,5,0 (0),2,N/A,3,"Annotations: eq.* list.* False.* Statement: forall (A : Set) (l l' : list A) (a : A), nil A = app A l (cons A a l') -> False."
in_app_or,List,46,9,1 (1),4,1 (1),5,"Annotations: eq.* list.* True.* False.* or.* Statement: forall (A : Set) (l m : list A) (a : A), In A a (app A l m) -> or (In A a l) (In A a m)."
in_nil,List,20,6,0 (0),1,N/A,4,"Annotations: eq.* list.* False.* or.* Statement: forall (A : Set) (a : A), In A a (nil A) -> False."
in_or_app,List,43,7,0 (0),1,N/A,4,"Annotations: eq.* list.* False.* or.* Statement: forall (A : Set) (l m : list A) (a : A), or (In A a l) (In A a m) -> In A a (app A l m)."
rev_app,List,61,8,2 (2),6,"2 (1, 2)",4,"Annotations: eq.* eq_ind_r list.* app Statement: forall (T : Set) (l1 l2 : list T), rev T (app T l1 l2) = app T (rev T l2) (rev T l1)."
rev_map,List,63,8,1 (0),5,N/A,4,"Annotations: eq.* eq_ind_r list.* app Statement: forall (T : Set) (l1 l2 : list T), rev T (app T l1 l2) = app T (rev T l2) (rev T l1)."
zip_preserves_length,List,44,9,0 (0),5,N/A,6,"Annotations: eq.* eq_ind_r list.* prod.* nat.* min Statement: forall (T1 T2 : Set) (l1 : list T1) (l2 : list T2), length (prod T1 T2) (zip T1 T2 l1 l2) = min (length T1 l1) (length T2 l2)."
diff_true_false,Bool,25,7,0 (0),0,N/A,4,Annotations: eq.* not True.* False.* Statement: (true = false) -> False.
diff_false_true,Bool,39,9,2 (1),1,1 (1),5,Annotations: eq.* not True.* False.* eq_sym Statement: (true = false) -> False.
andb_comm,Bool,19,5,0 (0),1,N/A,2,"Annotations: eq.* bool.* Statement: forall b1 b2 : bool, andb b1 b2 = andb b2 b1."
orb_comm,Bool,19,5,0 (0),1,N/A,2,"Annotations: eq.* bool.* Other: Itself, forall b : bool, b = b Statement: forall b1 b2 : bool, orb b1 b2 = orb b2 b1."
andb_assoc,Bool,19,4,0 (0),1,N/A,2,"Annotations: eq.* bool.* Other: Itself, forall b : bool, b = b Statement: forall b1 b2 b3 : bool, andb b1 (andb b2 b3) = andb (andb b1 b2) b3."
orb_assoc,Bool,19,4,0 (0),1,N/A,2,"Annotations: eq.* bool.* Other: Itself, forall b : bool, b = b Statement: forall b1 b2 b3 : bool, orb b1 (orb b2 b3) = orb (orb b1 b2) b3."
andb_diag,Bool,19,4,0 (0),1,N/A,2,"Annotations: eq.* bool.* Other: Itself, forall b : bool, b = b Statement: forall b : bool, andb b b = b."
or_assoc,Logic,20,3,0 (0),0,N/A,0,"Statement: forall (A B C : Prop), and (or A (or B C) -> or (or A B) C) (or (or A B) C -> or A (or B C))."
or_comm,Logic,9,2,0 (0),0,N/A,0,"Statement: forall (A B : Prop), or A B -> or B A."
and_assoc,Logic,13,2,0 (0),0,N/A,0,"Statement: forall (A B C : Prop), and (and A (and B C) -> and (and A B) C) (and (and A B) C -> and A (and B C))."
and_comm,Logic,8,2,0 (0),0,N/A,0,"Statement: forall (A B : Prop), and A B -> and B A."
or_distr_and,Logic,12,3,0 (0),0,N/A,0,"Statement: forall P Q R : Prop, or P (and Q R) -> and (or P Q) (or P R)."
and_to_imp,Logic,8,2,0 (0),0,N/A,0,"Statement: forall P Q R : Prop, ((and P Q) -> R) -> (P -> (Q -> R))."
imp_trans,Logic,5,1,0 (0),0,N/A,0,"Statement: forall P Q R : Prop, ((and P Q) -> R) -> (P -> (Q -> R))."
demorgan2,Logic,14,3,0 (0),0,N/A,0,"Statement: forall P Q : Prop, not (or P Q) -> and (not P) (not Q)."
not_True,Logic,13,3,0 (0),0,N/A,0,Statement: (not True) -> False.
falsem,Logic,7,2,0 (0),0,N/A,0,"Statement: forall P : Prop, False -> P."
append_correct2,String,95,14,2 (2),10,"2 (6, 8)",8,"Annotations: eq.* eq_ind_r bool.* nat.* plus ascii.* string.* get Statement: forall (s1 s2 : string) (n : nat), get n s2 = get (plus n (length s1)) (append s1 s2)."